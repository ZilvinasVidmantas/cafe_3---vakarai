* Funkcinis komponenetas, tai funkcija kuri grąžina JSX

* Norint panaudoti komponentą jį reikia exportuoti iš failo, kuriame jis yra aprašytas ir įtraukti tame faile, kuriame norite jį panaudoti.

* Bet koks React komponenetas privalo grąžinti VIENĄ elementą.

* Komponenetui perduodami atributai (naudojimo metu) yra formuojami objektu, ir perduodami komponentui pirmu parametru. Jie vadinami PROPS: https://reactjs.org/docs/components-and-props.html
  <Komponenetas a="7" b="Ne tavo reikalas"> =>> Komponentas({ a: 7, b: 'ne tavo reikalas'})

* Turinys tarp komponento atsidarymo ir komponento užsidarymo yra automatiškai perduodamas komponentui į savybę (prop) "children". <Komp>children</Komp>

* Kuriant komponentus pagal masyve esančius duomenis, komponentams turite perduoti prop'są key, kuris skirtas identifikuoti komponentą persikrovimo metu, ir neperkurti jo pakartotinai. Taip yra daroma dėl resursų taupymo

* useState - tai speciali funkcija naudojama viduje funkcinių komponenetų. Ši funkcija "useState", grąžina masyvą: pirmas grąžinto masyvo elementas - reikšmė skirta naudojimui, antras masyvo elementas tai funkcija skirta pakeisti pirmajį masyvo elementą. Šių reikšmių keisti tiesiogiai negalima. Tam, kad tas reikšmes patogiai naudoti, beveik visada naudojame masyvo destrūkturizacijos sintaksę. Kiekvieną kartą kai naudojame state kintamojo nustatymo funkciją (dispatch) persikrauna komponenetas. 

* useEffect - tai speciali funkciją naudojama React funkciniuose komponenetuose. Ji skirta reaguoti į kintamųjų pakitimą ir vykdyti papildomus veiksmus. useEffect(kaDaryti, masyvasStebimųReikšmių). Jeigu stebimų reikšmių masyvo nėra, tuomet "kaDaryti" funkcija vykdosi kiekvieno komponeneto-persikrovimo metu. Jeigu masyvas "masyvasStebimųReikšmių" yra tuščias, funkcija "kaDaryti" vykdoma tik vieną-pirmajį kartą.

* Komponentai persikrauna:
  * Kai gaunna naujus prop'sus
  * Kai vykdoma useState hook'so dispatch funkcija:
               ↙↙↙ - dispatch funkcija      
    const [x, setX] = useState([]);

* Controlled component - tai toks komponentas kuris per parametrą/us gauna reikšmę/reikšmes ir funkciją/funkcijas toms reikšmėms keisti. Controlled komponentų tikslas, tik atvaizduoti komponento vaizdą, ir leisti duomenis valdyti tėviniam komponentui. Tokiu būsu komponentai pasiskirto vaidmenimis - duomenis kontroliaujantis komponentas, duomenis atvaizduojantis komponentas. Dar ši metodologija yra žinoma kaip smart-dumb components;
